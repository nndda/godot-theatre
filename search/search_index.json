{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Warning</p> <p>Godot Theatre plugin and this documentation is under development. The contents of this documentation are subject to frequent changes.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-the-plugin","title":"Installing the plugin","text":""},{"location":"installation/#via-godot-asset-library","title":"via Godot asset library","text":"<ol> <li> <p>Go to <code>AssetLib</code> scene tab</p> </li> <li> <p>Search for <code>\"Theatre\"</code></p> </li> <li> <p>Install</p> </li> </ol>"},{"location":"installation/#via-official-releases","title":"via official releases","text":"<ol> <li> <p>Download the latest release from either:</p> <ul> <li> GitHub</li> <li> itch.io</li> </ul> </li> <li> <p>Go to <code>AssetLib</code> scene tab.</p> </li> <li> <p>Click <code>import...</code> on the top right corner.</p> </li> <li> <p>And select the downloaded zip file.</p> </li> </ol>"},{"location":"installation/#enabling-the-plugin","title":"Enabling the plugin","text":"<p>Make sure that Theatre is enabled at <code>Project &gt; Project Settings... &gt; Plugins</code>.</p> <p>You should see the following on your console output</p> <pre><code>\ud83c\udfad Theatre v0.0.1-alpha.3 by nnda\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>You've installed the plugin. You had the characters, plot, and the worldbuilding of your story ready, or maybe not, thats ok too. Lets start with writing the <code>Dialogue</code>.</p>"},{"location":"quickstart/#writing-the-dialogue","title":"Writing the Dialogue","text":"<p>Create a new text file in your project. And write your dialogue with the following syntax:</p> <pre><code>Actor name:\n    \"The syntax is similar to languages like YAML\"\n\nActor name:\n    \"You just need the character or actor's name,\n    with `:` at the end\"\n\nActor name:\n    \"and the dialogue body indented\"\n\nActor name:\n    The quotation marks is also entirely optional\n\n# You can also comments using (#) symbol\n</code></pre> <p>In this example, we'll save the file as <code>res://intro.txt</code>. Now that the <code>Dialogue</code> is ready, lets set up the <code>Stage</code>.</p> <p>More on writing the Dialogue here.</p>"},{"location":"quickstart/#setting-up-the-stage","title":"Setting up the Stage","text":"<p>Create a new 2D scene. And add <code>Label</code>, and <code>DialogueLabel</code> node.</p> <p>To tidy things up a little, we'll put those two inside a <code>PanelContainer</code>. Here's what the current scene should looks like:</p> <pre><code>- YourScene\n  \\- PanelContainer\n      |- Label\n      \\- DialogueLabel\n</code></pre> <p>Attach a script to your scene's root. And create a <code>Stage</code> variable with <code>@onready</code> keyword.</p> <pre><code>@onready var stage = Stage.new()\n</code></pre> <p>Reference the <code>Label</code> and <code>DialogueLabel</code> node we made before as the parameter, written inside a dictionary:</p> <pre><code>@onready var stage = Stage.new({\n    \"actor_label\": $PanelContainer/Label,\n    \"dialogue_label\": $PanelContainer/DialogueLabel\n})\n</code></pre>"},{"location":"quickstart/#starting","title":"Starting","text":"<p>Now, lets create another variable to store the Dialogue. Use <code>Dialogue.load()</code> and pass the absolute path of the text file as the parameter:</p> <pre><code>var intro = Dialogue.load(\"res://intro.txt\")\n</code></pre> <p>After that, you can start it with <code>Stage.start()</code> method:</p> <pre><code>func _ready():\n    stage.start(intro)\n</code></pre> <p>Now the Dialogue will start when you play the scene. And thats it!... or is it?</p> <p>Something doesn't feel right. You can't progress the dialogue no matter what key you pressed.</p>"},{"location":"quickstart/#progressing","title":"Progressing","text":"<p>The <code>Stage.progress()</code> does exactly what it says. You have to trigger the progress manually. In this example, we'll use <code>_input(event)</code> and Godot's default action key <code>'ui_accept'</code> (space/enter key).</p> <pre><code>func _input(event):\n    if event.is_action_pressed(\"ui_accept\"):\n        stage.progress()\n</code></pre> <p>Now, everytime the <code>'ui_accept'</code> key is pressed, the Dialogue should progress.</p>"},{"location":"quickstart/#additional-stuff","title":"Additional stuff","text":""},{"location":"quickstart/#toggling-the-ui","title":"Toggling the UI","text":"<p>You might want to only show the UI when theres a Dialogue running, and hide it when the Dialogue ends.</p> <p><code>Stage</code> class also fitted with signals such as <code>started</code>, <code>finished</code>, and <code>progressed</code> that are pretty self-explanatory.</p> <p>We'll connect these signals in <code>_ready()</code> before starting the Dialogue. And just call the method <code>show</code> and <code>hide</code> on the parents UI Node <code>$PanelContainer</code>:</p> <pre><code>func _ready():\n    stage.started.connect(\n        $PanelContainer.show\n    )\n    stage.finished.connect(\n        $PanelContainer.hide\n    )\n\n    stage.start(intro)\n</code></pre> <p>In this example, we only used the <code>show</code> and <code>hide</code> method. You can use <code>AnimationPlayer</code> or <code>Tween</code> for more fancy transition.</p>"},{"location":"quickstart/#summary","title":"Summary","text":"<p>And, thats it!</p> <p>heres the finalized script of the scene: <pre><code>extends Node2D\n\n@onready var stage = Stage.new({\n    \"actor_label\" : $PanelContainer/Label,\n    \"dialogue_label\" : $PanelContainer/DialogueLabel\n})\n\nvar intro = Dialogue.load(\"res://intro.txt\")\n\nfunc _input(event):\n    if event.is_action_pressed(\"ui_accept\"):\n        stage.progress()\n\nfunc _ready():\n    stage.started.connect(\n        $PanelContainer.show\n    )\n    stage.finished.connect(\n        $PanelContainer.hide\n    )\n\n    stage.start(intro)\n</code></pre></p>"},{"location":"dialogue/constructing/","title":"Constructing the Dialogue","text":"<p>You can create a Dialogue variable by using <code>Dialogue.load()</code> and pass the absolute path of the text file as the parameter.</p> <pre><code>var dlg = Dialogue.load(\"res://intro.txt\")\n</code></pre> <p>You can also create it in the script with <code>Dialogue.new()</code>. And then write the dialogue directly using triple quotation marks <code>\"\"\"</code> as the parameter.</p> <pre><code>var dlg = Dialogue.new(\"\"\"\n\nRitsu:\n    \"Hello, world!\"\n\n\"\"\")\n</code></pre> <p>Its recommended to create Dialogue variable via <code>load()</code> instead of creating it directly with <code>new()</code>. Because parsing the text strings is quite a heavy process, and may lead to performance issue.</p>"},{"location":"dialogue/methods/","title":"Methods","text":""},{"location":"dialogue/methods/#get_word_count-int","title":"<code>get_word_count()</code> <code>-&gt; int</code>","text":"<p>Get word count from a Dialogue resource. Variable placeholder like <code>{username}</code> counts as 1 word. Any words separated by <code>.</code>, <code>,</code> or <code>;</code> are counts as separate words.</p>"},{"location":"dialogue/methods/#get_dialogue_string-string","title":"<code>get_dialogue_string()</code> <code>-&gt; String</code>","text":""},{"location":"dialogue/writing/","title":"Writing your dialogue","text":"<p>This page cover the syntax of the Dialogue, and its features.</p> <p><code>Dialogue</code> text/string needs to have atleast one actor's name with <code>:</code> at the end, and the dialogue body indented: <pre><code>Actor name:\n    Dialogue body\n</code></pre></p> <pre><code>Ritsu:\n    \"You\n    can\n    break\n    new line\n    many times,\n    as long\n    as the dialogue body\n    is indented\"\n</code></pre>"},{"location":"dialogue/writing/#comments","title":"Comments","text":"<p>You can write comments with <code>#</code>. <pre><code>Ritsu:\n    \"Hello, world!\"\n\n# this is a comment\n</code></pre></p> <p>Note</p> <p>Comments can only be placed on a new line. You can't put comments after actor's name or dialogue body. <pre><code>Ritsu:\n    \"Hello, world!\" # this is not allowed\n</code></pre></p>"},{"location":"dialogue/writing/#variables","title":"Variables","text":"<p>Godot's built-in method <code>String.format()</code> are used to insert variables into dialogue body and the actor's name. You can define the variable with <code>Stage.variables</code>.</p> <pre><code>{player_name}:\n    \"Hi there\"\n\nRitsu:\n    \"Hello {player_name}!\"\n</code></pre>"},{"location":"dialogue/writing/#built-in-tags","title":"Built-in tags","text":"<p>There are several built-in tags to customize how the Dialogue flows.</p>  delay/wait <p>Pause the text progress at its position for <code>t</code> seconds. <pre><code>{ delay = t }\n{ wait = t }\n</code></pre> <pre><code>Dia:\n    \"I was um...{delay = 0.6} thinking about something\"\n</code></pre></p>  speed <p>Change the text progress' speed at its position by <code>s</code> times. Revert back to normal speed (<code>s = 1</code>) when finished. <pre><code>{ speed = s }\n</code></pre> <pre><code>Ritsu:\n    \"That place is quite {speed = 0.4}spooky\"\n</code></pre></p>"},{"location":"dialogue/writing/#function-calls","title":"Function calls","text":"<p>Before calling the functions within the dialogue, you need to set the <code>caller</code>: the Object from which the function will be called.</p> <pre><code>stage.set_caller(\"Player\", $Player)\n</code></pre> <p>After that you can call the functions with the following syntax: <pre><code>caller.function_name()\n</code></pre></p> <pre><code>{player_name}:\n    \"Thanks, that feels so much better\"\n    Player.heals(25)\n</code></pre> <p>A <code>caller</code> will be deleted when its object is freed. You can also delete them manually with <code>Stage.remove_caller</code>.</p> <pre><code>stage.remove_caller(\"Player\")\n</code></pre> <p>Currently, function calls in Dialogue only accept the following parameter type:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>String</code></li> </ul>"},{"location":"stage/setting-up/","title":"Setting up your Stage","text":"<p>For the <code>Dialogue</code> to run you'll need to create <code>Stage</code> and add a <code>DialogueLabel</code> node to your scene.</p>"},{"location":"stage/setting-up/#creating-and-configuring-stage","title":"Creating and configuring Stage","text":"<p>Create a stage object in your script's global scope with <code>@onready</code> keyword.</p> <pre><code>@onready stage = Stage.new({\n    \"dialogue_label\": $DialogueLabel\n}) \n</code></pre> <p>Stage takes Dictionary as the constuctor parameter. Here's the overview of what options you can set:</p> <ul> <li><code>actor_label</code>: An optional <code>Label</code> node to display the name of actor/speaker/narrator</li> <li><code>dialogue_label</code>: A <code>DialogueLabel</code> node used to display the dialogue body. This is the only required parameter.</li> <li><code>variables</code>: </li> <li><code>speed</code>: Set how fast the dialogue is rendered.</li> </ul>"},{"location":"stage/setting-up/#progressing","title":"Progressing","text":"<p>Before starting your dialogue you need to set how to progress your dialogue with <code>Stage.progress()</code>.</p> <p>A common way is to progress with input event.</p> <pre><code>func _input(event):\n    if event.is_action_pressed(\"ui_accept\"):\n        stage.progress()\n</code></pre>"}]}