{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#theatre","title":"Theatre","text":"<pre><code>Dia:\n    \"Welcome to Theatre's official documentation page!\"\n</code></pre> <p>Welcome to the official documentations for Theatre, a text-based dialogue system addon for Godot 4. Head over to the Installation and Quick Start pages to get started.</p> <p>Warning</p> <p>Theatre and this documentation is under development. The contents of this documentation are subject to frequent changes, and might not fully reflect the current Theatre version.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-the-plugin","title":"Installing the plugin","text":""},{"location":"installation/#via-godot-asset-library","title":"via Godot asset library","text":"<ol> <li> <p>Go to the <code>AssetLib</code> scene tab.</p> </li> <li> <p>Search for <code>\"Theatre\"</code>.</p> <p></p> </li> <li> <p>Click <code>Download</code>, and wait for the download to finish.</p> </li> <li> <p>Make sure <code>Ignore asset root</code> is checked, and then click <code>Install</code>.</p> </li> </ol>"},{"location":"installation/#via-official-releases","title":"via official releases","text":"<ol> <li> <p>Download the latest release from either:</p> <ul> <li> Godot Asset Library</li> <li> GitHub</li> <li> itch.io</li> </ul> </li> <li> <p>Go to the <code>AssetLib</code> scene tab.</p> </li> <li> <p>Click <code>Import...</code> on the top right corner.</p> </li> <li> <p>Select the downloaded zip file.</p> </li> <li> <p>Make sure <code>Ignore asset root</code> is checked, and then click <code>Install</code>.</p> </li> </ol>"},{"location":"installation/#enabling-the-plugin","title":"Enabling the plugin","text":"<p>Make sure that Theatre is enabled at <code>Project &gt; Project Settings... &gt; Plugins</code>.</p> <p>You should see the following on your console output.</p> <pre><code>\ud83c\udfad Theatre v0.3.6-alpha by nnda\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>You've installed the plugin. You had the characters, plot, and the worldbuilding of your story ready, or maybe not, thats ok too. Lets start with writing the <code>Dialogue</code>.</p>"},{"location":"quickstart/#writing-the-dialogue","title":"Writing the Dialogue","text":"<p>Create a new text file in your project. And write your dialogue with the following syntax:</p> <pre><code>Actor name:\n    \"The syntax is similar to languages like YAML\"\n\nActor name:\n    \"You just need the character or actor's name,\n    with `:` at the end\"\n\nActor name:\n    \"and the dialogue body indented\"\n\nActor name:\n    The quotation marks is also entirely optional\n\n# You can also comment using (#) symbol\n</code></pre> <p>In this example, we'll save the file as <code>res://intro.dlg.txt</code>. Now that the <code>Dialogue</code> is ready, lets set up the <code>Stage</code>.</p> <p>More on writing Dialogue here.</p> <p>Important</p> <p>Dialogue resource are saved with the file extension <code>*.dlg.txt</code></p>"},{"location":"quickstart/#setting-up-the-stage","title":"Setting up the Stage","text":"<p>Create a new 2D scene. And add <code>Label</code>, and <code>DialogueLabel</code> node.</p> <p>To tidy things up a little, we'll put those two inside a <code>PanelContainer</code>. Here's what the current scene should looks like:</p> <pre><code>- YourScene\n  \\- PanelContainer\n      |- Label\n      \\- DialogueLabel\n</code></pre> <p>Attach a script to your scene's root. And create a <code>Stage</code> variable with <code>@onready</code> keyword.</p> <pre><code>@onready var stage = Stage.new()\n</code></pre> <p>Reference the <code>Label</code> and <code>DialogueLabel</code> node we made before as the arguments, written inside a dictionary:</p> <pre><code>@onready var stage = Stage.new({\n    'actor_label': $PanelContainer/Label,\n    'dialogue_label': $PanelContainer/DialogueLabel\n})\n</code></pre>"},{"location":"quickstart/#starting","title":"Starting","text":"<p>Now, lets create another variable to store the Dialogue. Use <code>Dialogue.load()</code> and pass the absolute path of the text file as the parameter:</p> <pre><code>var intro = Dialogue.load('res://intro.txt')\n</code></pre> <p>After that, you can start it with <code>Stage.start()</code> method:</p> <pre><code>func _ready():\n    stage.start(intro)\n</code></pre> <p>Now the Dialogue will start when you play the scene. And thats it!... or is it?</p> <p>Something doesn't feel right. You can't progress the dialogue no matter what key you pressed.</p>"},{"location":"quickstart/#progressing","title":"Progressing","text":"<p>The <code>Stage.progress()</code> does exactly what it says. You have to trigger the progress manually. In this example, we'll use <code>_input(event)</code> and Godot's default action key <code>'ui_accept'</code> (space/enter key).</p> <pre><code>func _input(event):\n    if event.is_action_pressed('ui_accept'):\n        stage.progress()\n</code></pre> <p>Now, everytime <code>'ui_accept'</code> key is pressed, the Dialogue should progress.</p>"},{"location":"quickstart/#additional-stuff","title":"Additional stuff","text":""},{"location":"quickstart/#toggling-the-ui","title":"Toggling the UI","text":"<p>You might want to only show the UI when theres a Dialogue running, and hide it when the Dialogue ends.</p> <p><code>Stage</code> class is also equipped with signals such as <code>started</code>, <code>finished</code>, and <code>progressed</code> that are pretty self-explanatory.</p> <p>We'll connect these signals in <code>_ready()</code> before starting the Dialogue. And just call the method <code>show</code> and <code>hide</code> on the parents UI Node <code>$PanelContainer</code>:</p> <pre><code>func _ready():\n    stage.started.connect(\n        $PanelContainer.show\n    )\n    stage.finished.connect(\n        $PanelContainer.hide\n    )\n\n    stage.start(intro)\n</code></pre> <p>In this example, we only used <code>show</code> and <code>hide</code> method for simplicity. You can use <code>AnimationPlayer</code> or <code>Tween</code> for more fancy transition.</p>"},{"location":"quickstart/#summary","title":"Summary","text":"<p>And, thats it!</p> <p>Here is the finalized script of the scene: <pre><code>extends Node2D\n\n@onready var stage = Stage.new({\n    'actor_label' : $PanelContainer/Label,\n    'dialogue_label' : $PanelContainer/DialogueLabel\n})\n\nvar intro = Dialogue.load('res://intro.txt')\n\nfunc _input(event):\n    if event.is_action_pressed('ui_accept'):\n        stage.progress()\n\nfunc _ready():\n    stage.started.connect(\n        $PanelContainer.show\n    )\n    stage.finished.connect(\n        $PanelContainer.hide\n    )\n\n    stage.start(intro)\n</code></pre></p>"},{"location":"quickstart/#next-step","title":"Next step","text":"<p>More about writing you <code>Dialogue</code> on Dialogue syntax page.</p>"},{"location":"classes/dialogue/","title":"Dialogue","text":""},{"location":"classes/dialogue/syntax/","title":"Dialogue syntax","text":"<p>This page covers the syntax of <code>Dialogue</code> and its features.</p> <p>Dialogue text file needs to be saved as <code>*.dlg.txt</code>. Dialogue text/string needs to have at least one actor's name with <code>:</code> at the end, and the dialogue body indented: <pre><code>Actor's name:\n    Dialogue body\n</code></pre></p> <pre><code>Ritsu:\n    \"You can\n    break newline\n    many times,\n    as long\n    as the dialogue body\n    is indented!\"\n</code></pre> <p>Note</p> <p>Even though the dialogue above has multiple newline breaks, it will be rendered without the newline: <pre><code>\"You can break newline many times, as long as the dialogue body is indented!\"\n</code></pre> You can insert newlines by using <code>{n}</code> dialogue variable.</p>"},{"location":"classes/dialogue/syntax/#actors-name","title":"Actor's name","text":"<p>When writing many dialogue lines of the same actor, typing the same actor's name for each line can be quite tedious.</p> <p>You can leave the following actor's name blank, leaving <code>:</code> alone. It will use the last declared actor's name.</p> <pre><code>Dia:\n    \"I'm honestly running out of\n    ideas for the dialogue\n    text example\"\n\nDia:\n    \"And I don't want to use\n    'lorem ipsum' over and\n    over again\"\n\nDia:\n    \"Or using 'Hello, world!'\"\n</code></pre> <pre><code>Dia:\n    \"I'm honestly running out of\n    ideas for the dialogue\n    text example\"\n\n:\n    \"And I don't want to use\n    'lorem ipsum' over and\n    over again\"\n\n:\n    \"Or using 'Hello, world!'\"\n</code></pre> <p>Leave the actor's name blank, by using a single underscore (<code>_</code>).</p> <pre><code>_:\n    I am a nameless narrator.\n</code></pre>"},{"location":"classes/dialogue/syntax/#comments","title":"Comments","text":"<p>Write comments by placing <code>#</code> at the start of a new line. <pre><code>Ritsu:\n    \"This is a dialogue!\"\n\n# and this is a comment\n</code></pre></p> <p>Warning</p> <p>Comments can only be placed on a new line. With the <code>#</code> character placed at the beginning of the line. You can't put comments after the actor's name or dialogue body. <pre><code>Ritsu:\n    \"This right here \ud83d\udc49\" # this is not allowed\n    # and this will not count as a comment\n</code></pre></p>"},{"location":"classes/dialogue/syntax/#variables","title":"Variables","text":"<p>Use <code>{var}</code> to insert variables into the dialogue body or actor's name.</p> <pre><code>{player_name}:\n    \"Hi there\"\n\nRitsu:\n    \"Hello {player_name}!\"\n</code></pre> <p>Define the variable using <code>Stage.set_variable</code>.</p> <pre><code>your_stage.set_variable(\n    'player_name', 'John'\n)\n</code></pre> <p>You can also define multiple variables using <code>Stage.merge_variables</code> with a <code>Dictionary</code>.</p> <p><pre><code>your_stage.merge_variables({\n    'player_name': 'John',\n    'day_state': 'evening',\n    'day_left': 9,\n})\n</code></pre> <pre><code>Dia:\n    \"Good {day_state}, {player_name}.\n    The event will starts in {day_left} days\"\n</code></pre></p>"},{"location":"classes/dialogue/syntax/#built-in-variables","title":"Built-in variables","text":"Tags Description <code>{n}</code> Newline <code>{rb}</code> Right bracket character <code>}</code> <code>{lb}</code> Left bracket character <code>{</code> <p>Note</p> <p>Since the character <code>{</code> and <code>}</code> can be misinterpreted as a Dialogue variables or tags, Its best to use <code>{lb}</code> and <code>{rb}</code> to insert brackets.</p>"},{"location":"classes/dialogue/syntax/#tags","title":"Tags","text":"<p>There are several built-in tags to fine-tune the Dialogue flows. Tags can have several aliases: <code>{delay = 1.0}</code> can also be written as <code>{d = 1.0}</code>.</p>"},{"location":"classes/dialogue/syntax/#delaywait","title":"delay/wait","text":"Pause the text render at its position for <code>t</code> seconds. <pre><code>{ delay/wait/d/w = t }\n</code></pre> <pre><code>Dia:\n    \"Hello!{delay = 0.6} nice to meet you\"\n</code></pre>"},{"location":"classes/dialogue/syntax/#speed","title":"speed","text":"Change the text progress' speed at its position by <code>s</code> times. Revert back to normal speed (<code>s = 1</code>) when the Dialogue line is finished. <pre><code>{ speed/s = s }\n</code></pre> <pre><code>Ritsu:\n    \"That is quite {speed = 0.4}spooky\"\n</code></pre> You can also revert the speed back with <code>{s}</code> <pre><code>Ritsu:\n    \"So {s = 0.4}uh... {s}how's it going?\"\n</code></pre>"},{"location":"classes/dialogue/syntax/#function-calls","title":"Function calls","text":"<p>Before calling the functions within the dialogue, you need to set the <code>caller</code>: a Node from which the function will be called.</p> <p>You can do that using <code>Stage.add_caller</code>. The second argument must be a <code>Node</code> or anything that inherits <code>Node</code>.</p> <pre><code>your_stage.add_caller('player', $Player)\n</code></pre> <p>After that, you can call any functions within the caller; in this case <code>$Player</code>: <pre><code>{player_name}:\n    \"Thanks, that feels so much better\"\n    player.heals(25)\n</code></pre></p> <p>A <code>caller</code> will be removed when its node is freed. You can also delete them manually with <code>Stage.remove_caller</code>.</p> <pre><code>your_stage.remove_caller('player')\n</code></pre>"},{"location":"classes/dialogue/syntax/#passing-arguments","title":"Passing arguments","text":"<p>Warning</p> <p>Use caution when passing arguments when calling a function in a Dialogue.</p>"},{"location":"classes/dialogue/references/methods/","title":"Methods","text":"<p>Note</p> <p>This page might not cover every single methods in the <code>Dialogue</code> class.</p>"},{"location":"classes/dialogue/references/methods/#loaderparser","title":"Loader/Parser","text":""},{"location":"classes/dialogue/references/methods/#load","title":"load","text":"<p>Load Dialogue written in text file from <code>path</code>.</p> res://convo.dlg.txt<pre><code>Ritsu:\n    \"Remember to save the file as *.dlg.txt\"\n</code></pre> <pre><code>var dlg = Dialogue.new('res://convo.dlg.txt')\n</code></pre>"},{"location":"classes/dialogue/references/methods/#new","title":"new","text":"Create a new Dialogue by parsing <code>string</code> directly. Write the Dialogue with triple quotation marks (<code>\"\"\"</code>). <pre><code>var dlg = Dialogue.new(\"\"\"\n\nDia:\n    \"This is still not a recommended\n    way to do it\"\n\n\"\"\")\n</code></pre>"},{"location":"classes/dialogue/references/methods/#utilities","title":"Utilities","text":""},{"location":"classes/dialogue/references/methods/#get_length","title":"get_length","text":"Returns how many lines in the Dialogue. Example res://convo.dlg.txt<pre><code>Ritsu:\n    \"\"\n</code></pre>"},{"location":"classes/dialogue/references/methods/#get_word_count","title":"get_word_count","text":"Returns word count from the Dialogue. Variable placeholder like <code>{username}</code> counts as 1 word. Any words separated by <code>.</code>, <code>,</code> or <code>;</code> are counted as separate words. Example res://convo.dlg.txt<pre><code>Ritsu:\n    \"...\"\n\nDia:\n    \"...\"\n</code></pre><pre><code>print(\n    Dialogue.load('res://convo.dlg.txt').get_word_count()\n)\n# Will output: 6\n</code></pre>"},{"location":"classes/dialogue/references/methods/#converter","title":"Converter","text":""},{"location":"classes/dialogue/references/methods/#get_humanized","title":"get_humanized","text":"<p>Returns the entire Dialogue in a human-readable <code>string</code>. Optionally, you can pass a variables dictionary as an argument if variables are used. If none is passed, but the Dialogue used variables, it will left the placeholder as is.</p> Example <pre><code>var dlg = Dialogue.new(\"\"\"\n\nDia:\n    \"The addon include classes such as:{d = 0.7}\n    Dialogue,{d = 0.6}\n    Stage,{d = 0.6}\n    Theatre,{d = 0.6}\n    and TheatrePlugin.\n    \"\n\n\"\"\")\n\nprint(dlg.get_humanized())\n#   Dia:\n#       \"The addon include classes such as: Dialogue, Stage, Theatre, and TheatrePlugin.\"\n</code></pre>"},{"location":"classes/dialogue/references/methods/#to_json","title":"to_json","text":"Save the Dialogue resource to JSON in the specified <code>path</code>. <pre><code>dlg.to_json('user://convo.dlg.txt')\n</code></pre>"},{"location":"classes/dialogue/references/properties/","title":"Properties","text":"<p>Note</p> <p>This page might not cover every single properties in the <code>Dialogue</code> class</p>"},{"location":"classes/dialogue/references/properties/#source_path","title":"source_path","text":"Return the source of the compiled Dialogue. <pre><code>var dlg = Dialogue.load('res://convo.dlg.txt')\n\nprint(dlg.source_path) # res://convo.dlg.txt\n</code></pre>"},{"location":"classes/dialogue/tutorials/constructing/","title":"Loading the Dialogue","text":"<p>You can create Dialogue in the script by using <code>Dialogue.load()</code> and pass the absolute path of the text file as the parameter.</p> <pre><code>var dlg = Dialogue.load(\"res://intro.dlg.txt\")\n</code></pre> <p>You can also create it in the script with <code>Dialogue.new()</code>. And then write the dialogue directly using triple quotation marks <code>\"\"\"</code> as the parameter.</p> <pre><code>var dlg = Dialogue.new(\"\"\"\n\nDia:\n    \"This, however,\n    is not a recommended\n    way to do it\"\n\n\"\"\")\n</code></pre> <p>Note</p> <p>Parsing the Dialogue text is quite a heavy process. Its recommended to write a Dialogue in a text file, and load it using <code>load()</code>, instead of creating it directly in the script using <code>new()</code>.</p>"},{"location":"classes/dialogue/tutorials/constructing/#compiled-resources","title":"Compiled resources","text":"<p>You might notice an additional resources right besides the written Dialogue files, after running/testing the project. These are the compiled Dialogue resources. <pre><code>res:\\\\\n    | res://intro.dlg.txt\n    \\ res://intro.dlg.res  &lt;- compiled Dialogue\n</code></pre> If you're using version control like git, make sure that <code>*.dlg.res</code> files are ignored. <pre><code>!!! Note\n    Theatre already ignore these resources in `.gitignore`.\n</code></pre></p>"},{"location":"classes/stage/references/methods/","title":"Methods","text":""},{"location":"classes/stage/references/properties/","title":"Properties","text":"<p>Note</p> <p>This page might not cover every single properties in the <code>Stage</code> class</p>"},{"location":"classes/stage/references/properties/#configurations","title":"Configurations","text":""},{"location":"classes/stage/references/properties/#dialogue_label","title":"dialogue_label","text":"<code>DialogueLabel</code> node that will be used to render the <code>Dialogue</code>. This needs to be set when creating <code>Stage</code> object."},{"location":"classes/stage/references/properties/#actor_label","title":"actor_label","text":"<code>Label</code> node that will be used to display actor's name. Unlike <code>dialogue_label</code>, this property is optional."},{"location":"classes/stage/references/properties/#speed_scale","title":"speed_scale","text":"The speed scale in <code>float</code>, of how fast the dialogue is rendered. Default to <code>1.0</code>."},{"location":"classes/stage/references/properties/#allow_skip","title":"allow_skip","text":"Allow skipping Dialogue render if <code>progress()</code> is called while the Dialogue is being rendered. Default to <code>true</code>."},{"location":"classes/stage/references/properties/#allow_cancel","title":"allow_cancel","text":"Allow canceling or exiting Dialogue using <code>reset()</code> while the Dialogue is still running. Default to <code>true</code>."},{"location":"classes/stage/references/properties/#allow_func","title":"allow_func","text":"Allow calling functions written in the Dialogue. Default to <code>true</code>."},{"location":"classes/stage/references/properties/#caller","title":"caller","text":"<p><code>Dictionary</code> of callers. With the identifier string as the key, and its assigned Node as the value.</p> <p>Danger</p> <p>Do not modify this property directly. Instead, use <code>add_caller()</code>, <code>merge_caller()</code>, or <code>remove_caller()</code>.</p>"},{"location":"classes/stage/references/signals/","title":"Signals","text":""},{"location":"classes/stage/tutorials/setting-up/","title":"Setting up your Stage","text":"<p>For the <code>Dialogue</code> to run you'll need to create <code>Stage</code> and add a <code>DialogueLabel</code> node to your scene.</p>"},{"location":"classes/stage/tutorials/setting-up/#creating-and-configuring-stage","title":"Creating and configuring Stage","text":"<p>Create a stage object in your script's global scope with <code>@onready</code> keyword.</p> <pre><code>@onready stage = Stage.new({\n    'dialogue_label': $DialogueLabel\n})\n</code></pre> <p>Stage takes <code>Dictionary</code> as the constuctor parameter. Here's the overview of what options you can set:</p> Property Description <code>dialogue_label</code> A <code>DialogueLabel</code> node used to display the dialogue body. This is the only required parameter. <code>actor_label</code> An optional <code>Label</code> node to display the name of actor/speaker/narrator. <code>speed_scale</code> The speed scale in <code>float</code>, of how fast the dialogue is rendered. <code>allow_skip</code> Allow skipping <code>DialogueLabel</code> render. <code>allow_cancel</code> Allow cancelling the current running <code>Dialogue</code> with <code>Stage.reset()</code>. <code>allow_func</code> Allow function calls from <code>Dialogue</code>. <p>Note</p> <p>These options are also properties that you can set and modify after creating the Stage. <pre><code>stage.speed -= .5\nstage.allow_cancel = true\nstage.allow_func = false\n</code></pre></p>"},{"location":"classes/stage/tutorials/setting-up/#controlling-the-stage","title":"Controlling the Stage","text":""},{"location":"classes/stage/tutorials/setting-up/#progressing","title":"Progressing","text":"<p>Before starting your dialogue you need to set how to progress your dialogue with <code>Stage.progress()</code>.</p> <p>One common way is to progress with input event: eg. a press of a button, or a mouse click.</p> <pre><code>func _input(event):\n    if event.is_action_pressed('ui_accept'):\n        stage.progress()\n</code></pre>"},{"location":"classes/stage/tutorials/setting-up/#starting","title":"Starting","text":"<p>You can then use <code>Stage.start()</code> and pass the Dialogue as the parameter.</p> <pre><code>var dlg = Dialogue.load('res://convo.dlg.txt')\n\nfunc _ready():\n    stage.start(dlg)\n</code></pre>"},{"location":"classes/stage/tutorials/setting-up/#cancelling","title":"Cancelling","text":"<p>Sometimes, you might want to end the Dialogue even before its over. You can use <code>Stage.reset()</code>. You'll have to set <code>allow_cancel</code> to <code>true</code> for it to works.</p> <p>Just like progressing,  <pre><code>func _input(event):\n    if event.is_action_pressed('ui_accept'):\n        stage.progress()\n\n    elif event.is_action_pressed('ui_cancel'):\n        stage.reset()\n</code></pre></p>"}]}